<?xml version="1.0" encoding="utf-8"?>
<s:WindowedApplication xmlns:fx="http://ns.adobe.com/mxml/2009"
					   xmlns:s="library://ns.adobe.com/flex/spark"
					   xmlns:mx="library://ns.adobe.com/flex/mx"
					   width="800" height="400"
					   creationComplete="windowedapplication1_creationCompleteHandler(event)"
					   showStatusBar="false" xmlns:controls="controls.*">
	<fx:Script>
		<![CDATA[
			import mx.core.UIComponent;
			import flash.net.navigateToURL;
			import flash.utils.getTimer;
			
			import flashx.textLayout.factory.TruncationOptions;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.events.FlexEvent;
			
			import spark.components.Button;
			import spark.components.Image;
			
			private var dbConn:SQLConnection = new SQLConnection();
			private var dbStat:SQLStatement;
			
			[Bindable]private var blocks:ArrayCollection;
			private var repeatTimes:int = 20;
			
			private var tableName:String;
			
			private var qs:Vector.<Image> = new Vector.<Image>;
			private var questionList:Array;
			private var currentQ:Image;
			
			private var paused:Boolean;
			private var block:Boolean;
			private var jumping:Boolean;
			private var falling:Boolean = true;
			
			[Bindable]private var marks:int = 0;
			
			[Bindable][Embed(source="assets/blocks/empty.png")]private var emptyBlock:Class;
			[Bindable][Embed(source="assets/blocks/planks.png")]private var planksBlock:Class;
			[Bindable][Embed(source="assets/blocks/concrete.png")]private var concreteBlock:Class;
			[Bindable][Embed(source="assets/blocks/lake.png")]private var lakeBlock:Class;
			
			[Bindable][Embed(source="assets/blocks/po_1.png")]private var po1Block:Class;
			[Bindable][Embed(source="assets/blocks/po_2.png")]private var po2Block:Class;
			[Bindable][Embed(source="assets/blocks/po_3.png")]private var po3Block:Class;
			[Bindable][Embed(source="assets/blocks/po_4.png")]private var po4Block:Class;
			[Bindable][Embed(source="assets/blocks/po_5.png")]private var po5Block:Class;
			[Bindable][Embed(source="assets/blocks/po_6.png")]private var po6Block:Class;
			[Bindable][Embed(source="assets/blocks/po_7.png")]private var po7Block:Class;
			[Bindable][Embed(source="assets/blocks/po_8.png")]private var po8Block:Class;
			
			protected function windowedapplication1_creationCompleteHandler(event:FlexEvent):void
			{
				var f:File = File.applicationDirectory.resolvePath("db/data.db");
				dbStat = new SQLStatement();
				dbStat.sqlConnection = dbConn;
				dbConn.addEventListener(SQLEvent.OPEN, onDatabaseOpen);
				dbConn.open(f);
				
				var spin:Timer = new Timer(30);
				spin.addEventListener(TimerEvent.TIMER, onSpinTimer);
				spin.start();
				
				var s:Timer = new Timer(10000, 1);
				s.addEventListener(TimerEvent.TIMER, onSTimer);
				s.start();
				
				this.addEventListener(KeyboardEvent.KEY_UP, windowedapplication1_keyDownHandler);
			}
			
			private function onDatabaseOpen(event:SQLEvent):void
			{
				tableName = "blocks";
				dbStat.text = "SELECT * FROM blocks";
				dbStat.addEventListener(SQLEvent.RESULT, handleResult);
				dbStat.execute();
				
				tableName = "q";
				dbStat.text = "SELECT * FROM questions";
				dbStat.execute();
			}
			
			private function handleResult(event:SQLEvent):void
			{
				var result:SQLResult = dbStat.getResult();
				if (result != null)
				{
					if (tableName == "blocks") 
					{
						blocks = new ArrayCollection(result.data);
					}
					else if (tableName == "q") 
					{
						for (var i:int = 0; i < result.data.length; i++) 
						{
							var newBtn:Image = new Image();
							newBtn.x = Number(result.data[i].q_posX);
							newBtn.y = Number(result.data[i].q_posY);
							newBtn.width = newBtn.height = 20;
							newBtn.source = "assets/blocks/question.png";
							questions.addElement(newBtn);
							qs.push(newBtn);
						}
						questionList = result.data;
						
					}
				}
			}
			
			private function onSpinTimer(event:TimerEvent):void
			{
				rotateCurrentObject(black_spinner, 45);
			}
			
			private function onSTimer(event:TimerEvent):void
			{
				black_spinner.visible = false;
				black_btn.visible = true;
			}
			
			private function onTimer(event:TimerEvent):void
			{
				if (!paused)
				{
					if (endGroup.x <= 5920 && endGroup.x > 0) {
						blockTile.x -= 4;
						questions.x -= 4;
						backgroundImage.x -= 4;
						endGroup.x -= 4;
					}
					var log:Array = new Array();
					var currentBlock:Boolean = true;
					block = false;
					for (var j:int = 0; j < lab.length; j++) 
					{
						if (player.hitTestObject(lab[j])) 
						{
							log.push(lab[j].source);
						}
					}
					for (var k:int = 0; k < log.length; k++)
					{
						if (log[k] == planksBlock || log[k] == concreteBlock)
						{
							if (!block)
							{
								currentBlock = true;
							}
						}
						else
						{
							currentBlock = false;
						}
					}
					if (!currentBlock && falling && (!jumping))
					{
						falling = false;
						var pt:Timer = new Timer(10, 10);
						pt.addEventListener(TimerEvent.TIMER, onPTimer);
						pt.addEventListener(TimerEvent.TIMER_COMPLETE, onPTimerC);
						pt.start();
					}
					
					for (var i:int = 0; i < qs.length; i++) 
					{
						if (player.hitTestObject(qs[i]))
						{
							paused = true;
							currentQ = qs[i];
							question.visible = true;
							q_title.text = questionList[i].q_title;
							q_ans.text = questionList[i].q_ans;
							q_cho_1.label = questionList[i].q_cho1;
							q_cho_2.label = questionList[i].q_cho2;
							q_cho_3.label = questionList[i].q_cho3;
							move_question_box.play();
						}
					}
				}
				
			}
			
			private function onPTimer(event:TimerEvent):void
			{
				player.y += 4;
			}
			
			private function onPTimerC(event:TimerEvent):void
			{
				falling = true;
			}
			
			protected function submit_btn_clickHandler(event:MouseEvent):void
			{
				if (q_radio.selectedValue == q_ans.text) 
				{
					currentQ.y = -500;
					disolve_question.play([currentQ]);
					paused = false;
					move_question_box_away.play();
					marks += 100;
				}
				else
				{
					move_question_error.play();
					marks -= 50;
				}
				q_radio.selection = null;
				
				focusManager.setFocus(btn);
			}
			
			protected function windowedapplication1_keyDownHandler(event:KeyboardEvent):void
			{
				switch(event.keyCode)
				{
					case Keyboard.UP:
						jumping = true;
						var jt:Timer = new Timer(5, 40);
						jt.addEventListener(TimerEvent.TIMER, onJTimer);
						jt.addEventListener(TimerEvent.TIMER_COMPLETE, onJTC);
						jt.start();
						break;
				}
			}
			
			private function onJTimer(event:TimerEvent):void
			{
				player.y -= 4;
			}
			
			private function onJTC(event:TimerEvent):void
			{
				jumping = false;
				falling = true;
			}
			
			protected function black_btn_clickHandler(event:MouseEvent):void
			{
				focusManager.setFocus(btn);
				black.visible = false;
				black_title.visible = false;
				black_content.visible = false;
				black_btn.visible = false;
				black_spinner.visible = false;
				var t:Timer = new Timer(8);
				t.addEventListener(TimerEvent.TIMER, onTimer);
				
				t.start();
			}
			
			private function rotateCurrentObject(img:UIComponent, angle:Number):void 
			{
				var imgMatrix:Matrix = img.transform.matrix; 
				var centerX:Number = img.width / 2; 
				var centerY:Number = img.height / 2; 
				var centerPoint:Point = new Point(centerX, centerY); 
				var transformPoint:Point= imgMatrix.transformPoint(centerPoint); 
				
				imgMatrix.translate(-transformPoint.x, -transformPoint.y);
				imgMatrix.rotate(angle * Math.PI / 180);
				imgMatrix.translate(transformPoint.x, transformPoint.y);
				img.transform.matrix = imgMatrix;
			}
		]]>
	</fx:Script>
	<fx:Declarations>
		<s:RadioButtonGroup id="q_radio"/>
		<s:Parallel id="move_question_box">
			<s:Move xFrom="800" xTo="50" target="{question}" duration="500"/>
			<s:Fade alphaFrom="0" alphaTo="1" target="{question}" duration="300"/>
		</s:Parallel>
		<s:Parallel id="move_question_box_away">
			<s:Move xFrom="50" xTo="-800" target="{question}" duration="500"/>
			<s:Fade alphaFrom="1" alphaTo="0" target="{question}" duration="300"/>
		</s:Parallel>
		<s:Sequence id="move_question_error">
			<s:Fade alphaFrom="0" alphaTo="1" target="{error}" duration="300"/>
			<s:Parallel duration="300">
				<s:Sequence duration="300">
					<s:Move xBy="30" target="{question}" duration="50"/>
					<s:Move xBy="-30" target="{question}" duration="50"/>
					<s:Move xBy="-30" target="{question}" duration="50"/>
					<s:Move xBy="30" target="{question}" duration="50"/>
					<s:Move xBy="30" target="{question}" duration="50"/>
					<s:Move xBy="-30" target="{question}" duration="50"/>
				</s:Sequence>
				<s:Fade alphaFrom="1" alphaTo="0" target="{error}" duration="300"/>
			</s:Parallel>
		</s:Sequence>
		<s:Parallel id="disolve_question">
			<s:Resize heightBy="200" widthBy="200" duration="50"/>
			<s:Fade alphaFrom="1" alphaTo="0" duration="50"/>
		</s:Parallel>
	</fx:Declarations>
	<s:Image id="backgroundImage" width="5920" height="400" source="@Embed(source='assets/background.png')"/>
	<s:Group id="endGroup" width="800" height="400" x="5920">
		<s:Image id="endImage" width="800" height="400" source="@Embed(source='assets/end.png')"/>
		<s:Label width="100%" fontSize="30" horizontalCenter="0" text="Your total marks is: {marks.toString()}"
				 textAlign="center" verticalCenter="40"/>
		<s:Button width="300" height="50" horizontalCenter="0" verticalCenter="90" label="Please help us to fill out a Questionnaire." click="navigateToURL(new URLRequest('http://goo.gl/aQD0i'))"/>
	</s:Group>
	<mx:Tile id="blockTile" tileHeight="20" tileWidth="20" width="5920" height="400" horizontalGap="0" verticalGap="0" direction="vertical"
			 keyUp="windowedapplication1_keyDownHandler(event)">
		<mx:Repeater id="repeater_1" dataProvider="{blocks}">
			<s:Image id="lab" width="20" height="20" source="{(repeater_1.currentItem.type == 'empty')?emptyBlock:
					 (repeater_1.currentItem.type == 'planks')?planksBlock:
					 (repeater_1.currentItem.type == 'concrete')?concreteBlock:
					 (repeater_1.currentItem.type == 'lake')?lakeBlock:
					 (repeater_1.currentItem.type == 'po_1')?po1Block:
					 (repeater_1.currentItem.type == 'po_2')?po2Block:
					 (repeater_1.currentItem.type == 'po_3')?po3Block:
					 (repeater_1.currentItem.type == 'po_4')?po4Block:
					 (repeater_1.currentItem.type == 'po_5')?po5Block:
					 (repeater_1.currentItem.type == 'po_6')?po6Block:
					 (repeater_1.currentItem.type == 'po_7')?po7Block:
					 (repeater_1.currentItem.type == 'po_8')?po8Block:
					 ('assets/blocks/'+repeater_1.currentItem.type+'.png')}"/>
			<!--<s:Image id="lab" width="20" height="20" source="assets/blocks/{repeater_1.currentItem.type}.png"/>-->
		</mx:Repeater>
	</mx:Tile>
	<s:BorderContainer id="questions" width="5920" height="400"
					   backgroundAlpha="0" borderVisible="false"/>
	<controls:User id="player" x="40" y="100"/>
	<s:BorderContainer id="question" width="700" height="150"
					   bottom="20"
					   borderColor="0xCC6600" backgroundColor="0xE0A366" backgroundAlpha="0.7"
					   visible="false">
		<s:layout>
			<s:VerticalLayout paddingTop="20" paddingLeft="20" paddingRight="20"/>
		</s:layout>
		<s:HGroup width="100%">
			<s:Label id="q_title" width="100%"/>
			<s:Label id="q_ans" width="100%" visible="false"/>
		</s:HGroup>
		<s:RadioButton id="q_cho_1" width="100%" groupName="q_radio"/>
		<s:RadioButton id="q_cho_2" width="100%" groupName="q_radio"/>
		<s:RadioButton id="q_cho_3" width="100%" groupName="q_radio"/>
		<s:HGroup width="100%">
			<s:Button id="submit_btn" label="Submit" click="submit_btn_clickHandler(event)"/>
		</s:HGroup>
	</s:BorderContainer>
	<s:Button id="btn" creationComplete="focusManager.setFocus(btn);" x="3000"/>
	<s:Label top="20" right="20" width="200" height="30" text="Your marks: {marks.toString()}" textAlign="right"/>
	<s:Rect id="error" width="100%" height="100%" alpha="0">
		<s:fill>
			<s:RadialGradient>
				<s:GradientEntry color="0xFFEEEE" alpha="0.5"/>
				<s:GradientEntry color="0xFF3333"/>
			</s:RadialGradient>
		</s:fill>
	</s:Rect>
	<s:Rect id="black" width="100%" height="100%">
		<s:fill>
			<s:SolidColor color="#111111"/>
		</s:fill>
	</s:Rect>
	<s:Label id="black_title" top="10" color="#FFFFFF" fontFamily="Arial" fontSize="36"
			 fontWeight="bold" horizontalCenter="0" text="Harry Potter Game"/>
	<s:Label id="black_content" left="10" right="10" top="52" color="#FFFFFF" fontSize="20"
			 text="Play this game. Press the up arrow to jump. When you see a question mark, collides with it and it will ask you a question. Answer it to earn marks."
			 textAlign="center" verticalAlign="top"/>
	<mx:Container id="black_spinner" width="80" height="80" horizontalCenter="0"
				  verticalCenter="-20" clipContent="false">
		<s:Image width="80" height="80" scaleMode="zoom"
				 smooth="true" smoothingQuality="high" source="@Embed('assets/spinner.png')"/>
	</mx:Container>
	<s:Button id="black_btn" width="200" height="80" label="Start Game" fontSize="20" horizontalCenter="0"
			  verticalCenter="90" visible="false" click="black_btn_clickHandler(event)"/>
</s:WindowedApplication>
